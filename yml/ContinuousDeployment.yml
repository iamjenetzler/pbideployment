parameters:
  - name: environmentName
    displayName: Which Environment to deploy?
    type: string
    default: $(Build.SourceBranchName)    
  - name: workspaceName
    displayName: Workspace name to deploy?
    type: string
    default: $(Build.Repository.Name)
  - name: adminPrincipalId
    displayName: Admin PrincipalId to be added as workspace admin?
    type: string
    default: '5dc7bf4a-daac-4e9f-8a58-e3bab48da555'

trigger:
  branches:
    include:
      - dev
      - test
      - main
      - release/*
  paths:
    exclude:
      - yml/**

pr:
  branches:
    include:
      - release/*
  paths:
    exclude:
      - yml/**
      
pool: Self-hosted pool

variables:
  - group: fabricAPISecrets
  - name: 'environmentName'
    ${{ if eq(parameters['environmentName'], 'main') }}:
      value: 'prod'     
  - name: 'environmentName' 
    ${{ else }}:
      value: '${{ parameters.environmentName }}'

stages:
  # - stage: Build
  #   jobs:
  #     - job: Build
  #       steps:
  #         - checkout: self
  #           path: 'self'
  #         - task: UseDotNet@2
  #           inputs:
  #             packageType: 'sdk'
  #             version: '5.x'
  #             installationPath: $(Agent.ToolsDirectory)/dotnet
  #         - script: dotnet build
  #           displayName: 'Build Solution'
  #         - script: dotnet test
  #           displayName: 'Run Unit Tests'

  - stage: Deploy  
    jobs:
        - deployment: Deploy
          displayName: "Deploy"
          environment: '${{ variables.environmentName }}'
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self
                    path: 'self'
                  - task: PowerShell@2
                    displayName: 'Determine Workspace Name'
                    inputs:
                      pwsh: true
                      targetType: inline
                      script: |  
                          Write-Host "Environment $env:environmentName"                    
                          try {
                              # Navigate to the 'self' directory
                              Set-Location -Path "$(Build.SourcesDirectory)"

                              # Determine the workspace name based on the folder structure
                              $workspaceFolder = Get-ChildItem -Directory | Where-Object { $_.Name -notin @('.ado', 'yml') -and $_.Name -notmatch '\.' } | Select-Object -ExpandProperty Name
                              $workspaceName = "$workspaceFolder - $env:environmentName"
                              Write-Host "Workspace name determined: $workspaceName"
                              Write-Host "##vso[task.setvariable variable=workspaceName]$workspaceName"
                          } catch {
                              Write-Error "Failed to determine workspace name: $_"
                              exit 1
                          }               
                  
                  - task: PowerShell@2
                    displayName: 'Dependencies'
                    inputs:
                      pwsh: true
                      targetType: inline
                      script: |   
                          $path = "$(Build.SourcesDirectory)"

                          $workingFolder = "$path\.ado"

                          New-Item -ItemType Directory -Path "$workingFolder\modules" -ErrorAction SilentlyContinue | Out-Null

                          Write-Host "##[debug]Downloading FabricPS-PBIP module"

                          @(
                              "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psm1",
                              "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psd1") |% {
                                  
                                  Invoke-WebRequest -Uri $_ -OutFile "$workingFolder\modules\$(Split-Path $_ -Leaf)"

                              }

                          Write-Host "##[debug]Installing Az.Accounts"

                          if(-not (Get-Module Az.Accounts -ListAvailable)){
                              Install-Module Az.Accounts -Scope CurrentUser -Force
                          }
                  - task: PowerShell@2
                    displayName: 'Deploy PBIP'                    
                    inputs:
                      pwsh: true
                      targetType: inline
                      script: |
                          $path = "$(Build.SourcesDirectory)"
                          $appId = "$(appId)"
                          $appSecret = "$(appSecret)"
                          $tenantId = "$(tenantId)"                                      
                          $workspaceName = "$(workspaceName)"
                          $adminPrincipalId = "${{ parameters.adminPrincipalId }}"  
                          $environmentName = "$(environmentName)"     
                        
                          try {
                              # Navigate to the 'self' directory
                              Set-Location -Path $path

                              # Determine the workspace name based on the folder structure
                              $workspaceFolder = Get-ChildItem -Path . -Directory | Where-Object { $_.Name -notin @('.ado', 'yml') -and $_.Name -notmatch '\.' } | Select-Object -ExpandProperty Name
                              $workspaceName = "$workspaceFolder - $env:environmentName"
                              Write-Host "Workspace name determined: $workspaceName"
                              Write-Host "##vso[task.setvariable variable=workspaceName]$workspaceName"
                          } catch {
                              Write-Error "Failed to determine workspace name: $_"
                              exit 1
                          }

                          $workingFolder = "$path\.ado"

                          Import-Module "$workingFolder\modules\FabricPS-PBIP" -Force

                          Write-Host "##[debug]Authentication with SPN"

                          Set-FabricAuthToken -servicePrincipalId $appId -servicePrincipalSecret $appSecret -tenantId $tenantId -reset       

                          $workspacePermissions = @{
                              "principal" = @{
                                  "id" = "$adminPrincipalId"
                                  "type" = "user"
                              }
                              "role"= "Admin"
                          }

                          Write-Host "##[debug]Ensure Fabric Workspace & permissions"
                          
                          Write-Host "Deploying to $workspaceName" 
                          
                          $workspaceId = New-FabricWorkspace -name $workspaceName -skipErrorIfExists
                          Write-Host "WorkspaceId: ${workspaceId}"

                          Set-FabricWorkspacePermissions $workspaceId $workspacePermissions
                          
                          $semanticModelFiles = Get-ChildItem -Path "$sourcePath" -Recurse -Filter "*.SemanticModel"
                          $reportFiles = Get-ChildItem -Path "$sourcePath" -Recurse -Filter "*.Report"

                          Write-Host "##[debug]Publish Semantic Model"

                          foreach ($semanticModelFile in $semanticModelFiles) {
                            Write-Host "Importing semantic model: $($semanticModelFile.FullName)"
                            
                            # Import the semantic model and save the item id
                            $semanticModelImport = Import-FabricItem -workspaceId $workspaceId -path $semanticModelFile.FullName
                            Write-Host "Imported Semantic Model ID: $($semanticModelImport.Id) with name $($semanticModelImport.Name)"

                            # Find the corresponding report file and publish it
                            Write-Host "##[debug]Publish Report"
                            $semanticModelBaseName = [System.IO.Path]::GetFileNameWithoutExtension($semanticModelFile.Name)
                            Write-Host "Semantic Model Base Name: $semanticModelBaseName"
                            $reportFile = $reportFiles | Where-Object { [System.IO.Path]::GetFileNameWithoutExtension($_.Name) -eq $semanticModelBaseName }
                            if ($reportFile) {
                                Write-Host "Importing report: $($reportFile.FullName)"
                                # Debug output to verify the path
                                Write-Host "Report file path: $($reportFile.FullName)"
                                # Import the report and ensure it's bound to the imported semantic model
                                $reportImport = Import-FabricItem -workspaceId $workspaceId -path $reportFile.FullName -itemProperties @{"semanticModelId" = $semanticModelImport.Id}
                                Write-Host "Imported Report ID: $($reportImport.Id) with name $($reportImport.Name)"
                            } else {
                                Write-Host "No corresponding report found for semantic model: $($semanticModelFile.FullName)"
                            }
                          }   

                          Write-Host "##[debug]Published all reports and semantic models"