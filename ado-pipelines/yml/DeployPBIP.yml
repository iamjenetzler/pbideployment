parameters:
  - name: workspaceName
    displayName: Workspace name to deploy?
    type: string
    default: '[Workspace Name]'
  # Azure AD user object id, that will be added as admin in case the workspace does not exist. Learn more: https://learn.microsoft.com/en-us/partner-center/account-settings/find-ids-and-domain-names
  - name: adminPrincipalId
    displayName: Admin Principal Id to be added as workspace admin?
    type: string
    default: '5dc7bf4a-daac-4e9f-8a58-e3bab48da555'

trigger: none

pool: Self-hosted pool

variables:
  # Variable group with AppId, AppSecret and TenantId configuration. Learn more: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&tabs=yaml
  - group: fabricAPISecrets

stages:
 - stage: Deploy
   jobs:

    - job: Deploy
      steps:
        - checkout: self
          path: 'self'
        - task: PowerShell@2
          displayName: 'Download dependencies'
          inputs:
            pwsh: true
            targetType: inline
            script: |     
                $path = "$(Build.SourcesDirectory)"

                $workingFolder = "$path\.ado"

                New-Item -ItemType Directory -Path "$workingFolder\modules" -ErrorAction SilentlyContinue | Out-Null

                Write-Host "##[debug]Downloading FabricPS-PBIP module"

                @(
                    "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psm1",
                    "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psd1") |% {
                        
                        Invoke-WebRequest -Uri $_ -OutFile "$workingFolder\modules\$(Split-Path $_ -Leaf)"

                    }

                Write-Host "##[debug]Installing Az.Accounts"

                if(-not (Get-Module Az.Accounts -ListAvailable)){
                    Install-Module Az.Accounts -Scope CurrentUser -Force
                }
        - task: PowerShell@2
          displayName: 'Deploy PBIP'
          
          inputs:
            pwsh: true
            targetType: inline
            script: |
              
                $path = "$(Build.SourcesDirectory)"
                $appId = "$(appId)"
                $appSecret = "$(appSecret)"
                $tenantId = "$(tenantId)"                                        
                $workspaceName = "${{ parameters.workspaceName }}"
                $adminPrincipalId = "${{ parameters.adminPrincipalId }}"                

                $workingFolder = "$path\.ado"

                Import-Module "$workingFolder\modules\FabricPS-PBIP" -Force

                Write-Host "##[debug]Authentication with SPN"

                Set-FabricAuthToken -servicePrincipalId $appId -servicePrincipalSecret $appSecret -tenantId $tenantId -reset       

                $workspacePermissions = @{
                    "principal" = @{
                        "id" = "$adminPrincipalId"
                        "type" = "user"
                    }
                    "role"= "Admin"
                }

                Write-Host "##[debug]Authentication with SPN"

                Set-FabricAuthToken -servicePrincipalId $appId -servicePrincipalSecret $appSecret -tenantId $tenantId -reset                        

                Write-Host "##[debug]Ensure Fabric Workspace & permissions"

                $workspaceId = New-FabricWorkspace -name $workspaceName -skipErrorIfExists
                Write-Host "WorkspaceId: ${workspaceId}"

                Set-FabricWorkspacePermissions $workspaceId $workspacePermissions
                
                $semanticModelFiles = Get-ChildItem -Path "$sourcePath" -Recurse -Filter "*.SemanticModel"
                $reportFiles = Get-ChildItem -Path "$sourcePath" -Recurse -Filter "*.Report"

                Write-Host "##[debug]Publish Semantic Model"

                foreach ($semanticModelFile in $semanticModelFiles) {
                  Write-Host "Importing semantic model: $($semanticModelFile.FullName)"
                  
                  # Import the semantic model and save the item id
                  $semanticModelImport = Import-FabricItem -workspaceId $workspaceId -path $semanticModelFile.FullName
                  Write-Host "Imported Semantic Model ID: $($semanticModelImport.Id) with name $($semanticModelImport.Name)"

                  # Find the corresponding report file and publish it
                  Write-Host "##[debug]Publish Report"
                  $semanticModelBaseName = [System.IO.Path]::GetFileNameWithoutExtension($semanticModelFile.Name)
                  Write-Host "Semantic Model Base Name: $semanticModelBaseName"
                  $reportFile = $reportFiles | Where-Object { [System.IO.Path]::GetFileNameWithoutExtension($_.Name) -eq $semanticModelBaseName }
                  if ($reportFile) {
                      Write-Host "Importing report: $($reportFile.FullName)"
                      # Import the report and ensure it's bound to the imported semantic model
                      $reportImport = Import-FabricItem -workspaceId $workspaceId -path $reportFile.FullName -itemProperties @{"semanticModelId" = $semanticModelImport.Id}
                      Write-Host "Imported Report ID: $($reportImport.Id) with name $($reportImport.Name)"
                  } else {
                      Write-Host "No corresponding report found for semantic model: $($semanticModelFile.FullName)"
                  }
                }   

                Write-Host "##[debug]Published all reports and semantic models"

               